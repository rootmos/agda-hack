{-# OPTIONS --allow-unsolved-metas #-}
open import Structures
import Utils as U

open import Agda.Builtin.Equality using (_‚â°_) renaming (refl to ‚â°-refl)
open import Relation.Nullary
open import Data.Nat using (‚Ñï)
open import Data.Fin as F using (Fin; 0F)
open import Data.Vec as V using (Vec; _‚à∑_)
open import Data.Vec.All as A using (All)
open import Data.Product
open import Function.Equivalence using (_‚áî_; equivalence)
open import Level using (_‚äî_; suc)
open import Function using (_|>_; _$_)
open import Relation.Unary
import Algebra.Morphism as M

module SPE (‚ÑÇ : Currency ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) (ùî∏ : Allotment ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) (n : ‚Ñï)
           {h : _} (H : M.IsRingMorphism (Allotment.ring ùî∏) (Currency.ring ‚ÑÇ) h)
           (Feasible : Pred (Allotment.A ùî∏) ‚Ñì)
           where
open Currency ‚ÑÇ renaming (A to C)
open Allotment ùî∏ using () renaming (A to A; _‚â§_ to _‚â§·µÉ_)

Allocation = Fin n ‚Üí Œ£[ x ‚àà A ] Feasible x
Bid = Fin n ‚Üí C
Payment = Fin n ‚Üí C
Utility = Fin n ‚Üí C
Valuation = Fin n ‚Üí C -- TODO: is it possible to keep the non-negativity requirement? Œ£ (Fin n ‚Üí C) (Œª v ‚Üí ‚àÄ {i} ‚Üí 0# ‚â§ v i)

UtilityModel = Valuation ‚Üí Bid ‚Üí Utility

DominantStrategy : (Bid ‚Üí Utility) ‚Üí Fin n ‚Üí Pred C (‚Ñì ‚äî ‚Ñì‚ÇÇ)
DominantStrategy um i b·µ¢ = ‚àÄ (b‚Çå : Œ£[ b ‚àà Bid ] b i ‚â° b·µ¢) b ‚Üí um b i ‚â§ um (proj‚ÇÅ b‚Çå) i

DSIC : Pred (Valuation ‚Üí Bid ‚Üí Utility) _
DSIC um = ‚àÄ v i ‚Üí DominantStrategy (um v) i (v i)

Monotone : Pred (Bid ‚Üí Allocation) (‚Ñì ‚äî ‚Ñì‚ÇÇ)
Monotone a = ‚àÄ {i b‚ÇÄ b‚ÇÅ} ‚Üí b‚ÇÄ i ‚â§ b‚ÇÅ i
           ‚Üí (proj‚ÇÅ $ a b‚ÇÄ i) ‚â§·µÉ (proj‚ÇÅ $ a b‚ÇÅ i)

record DirectRelevation : Set (suc (‚Ñì ‚äî ‚Ñì‚ÇÇ)) where
  constructor DR
  field
    allocation : Bid ‚Üí Allocation
    payment : Bid ‚Üí Payment

  private
    a·∂ú : Bid ‚Üí Fin n ‚Üí C
    a·∂ú b i = h $ proj‚ÇÅ $ allocation b i

  quasiLinear : Œ£[ u ‚àà (Valuation ‚Üí Bid ‚Üí Utility) ] ‚àÄ v b i ‚Üí u v b i ‚â° v i * a·∂ú b i - payment b i
  quasiLinear = (Œª v b i ‚Üí v i * a·∂ú b i - payment b i) , Œª _ _ _ ‚Üí ‚â°-refl

  module _ (v : Valuation) (b : Bid) where
    private
      p = payment b
      a = a·∂ú b

    truthful : Pred (Fin n) ‚Ñì‚ÇÅ
    truthful i = v i ‚âà b i

    nonNegativeUtility : (‚àÄ i ‚Üí p i ‚â§ (b i * a i))
                       ‚Üí ‚àÄ {i} ‚Üí truthful i ‚Üí 0# ‚â§ proj‚ÇÅ quasiLinear v b i
    nonNegativeUtility P {i} t rewrite proj‚ÇÇ quasiLinear v b i =
      let Q‚ÇÄ = trans (+-identity ≥ _) (*-cong ≥ t) in
      let Q‚ÇÅ = trans (+-cong refl (-‚ÄøinverseÀ° _)) Q‚ÇÄ in
      let Q‚ÇÇ = trans (+-assoc _ _ _) Q‚ÇÅ in
      ‚â§-resp ≥-‚âà (sym Q‚ÇÇ) (P i)
        |> ‚â§-respÀ°-‚âà (sym $ +-identityÀ° _)
        |> proj‚ÇÇ +-cancel-‚â§ _ _

  Implementable : Set (‚Ñì ‚äî ‚Ñì‚ÇÇ)
  Implementable = DSIC (proj‚ÇÅ quasiLinear)

module Myerson where

  module _ {a} (M : Monotone a) where
    formula : Œ£[ p ‚àà (Bid ‚Üí Payment) ] ‚àÄ {i b} ‚Üí b i ‚âà 0# ‚Üí p b i ‚âà 0#
    formula = {!!}

    dr : DirectRelevation
    dr = DR a (proj‚ÇÅ formula)

    isDSIC : DSIC (proj‚ÇÅ $ DirectRelevation.quasiLinear dr)
    isDSIC v i (b‚Çå , pb‚Çå) b with DirectRelevation.quasiLinear dr
    ... | (ql , Q) with Q b v i | proj‚ÇÅ formula
    ... | Qb | F =
      let x = Œª b ‚Üí proj‚ÇÅ $ DirectRelevation.allocation dr b i in
      let p = Œª b ‚Üí DirectRelevation.payment dr b i in
      {!!}

module _ {dr : DirectRelevation} (T : ‚àÄ {x y} ‚Üí h x ‚â§ h y ‚Üí x ‚â§·µÉ y) where
  open DirectRelevation dr

  move ≥ : {a b c : C} ‚Üí (a + b) ‚â§ c ‚Üí a ‚â§ (c + - b)
  move ≥ P = proj‚ÇÇ +-cancel-‚â§ _ _ $ ‚â§-resp ≥-‚âà (sym $ trans (+-assoc _ _ _) $ trans (+-congÀ° $ -‚ÄøinverseÀ° _) $ +-identity ≥ _) P

  moveÀ° : {a b c : C} ‚Üí a ‚â§ (b + c) ‚Üí (a + - b) ‚â§ c
  moveÀ° P = {!!}

  implementable : Implementable ‚áî Monotone allocation
  implementable = equivalence to {!!}
    where
      to : Implementable ‚Üí Monotone allocation
      to I {i} {y} {z} B with I y i (y , ‚â°-refl) z | I z i (z , ‚â°-refl) y
      ... | P‚ÇÄ | Q‚ÇÄ with payment y i | payment z i | z i | y i | h (proj‚ÇÅ (allocation y i)) | h (proj‚ÇÅ (allocation z i))
      ... | py | pz | zi | yi | ay | az =
        let P = moveÀ° $ ‚â§-resp ≥-‚âà (+-assoc _ _ _) $ move ≥ P‚ÇÄ in
        let Q = moveÀ° $ ‚â§-resp ≥-‚âà (trans (sym $ +-cong ≥ $ +-comm _ _) (+-assoc _ _ _)) $ move ≥ $ ‚â§-respÀ°-‚âà (+-comm _ _) $ Q‚ÇÄ in
        let R = ‚â§-trans P Q in
        T {!!}


