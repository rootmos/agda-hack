module bf.Interpreter where

open import Category.Monad using (RawMonad)
open import Data.Bool using (Bool; true; false; not)
open import Data.Integer as ‚Ñ§ using (‚Ñ§; +_)
open import Data.List using (List; _‚à∑_; [])
open import Data.Maybe as ùïÑ using (Maybe)
open import Data.Product as ‚Ñô using (_√ó_; _,_; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Data.String using (String)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (‚ä§; tt)
open import Function using (_$_; _‚àò_)
open import Level using (Lift; lift; _‚äî_) renaming (suc to lsuc)
open import Relation.Binary using (Rel)
open import Relation.Nullary using (Dec)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Text.Printf using (printf)

record Tape {‚Ñì‚ÇÄ} (V : Set ‚Ñì‚ÇÄ) (F : ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì) : Set ‚Ñì‚ÇÄ where
  field
    get : ‚Ñ§ ‚Üí F (Maybe V)
    set : ‚Ñ§ ‚Üí V ‚Üí F (Lift ‚Ñì‚ÇÄ ‚ä§)

record Value ‚Ñì c : Set (lsuc (c ‚äî ‚Ñì)) where
  field
    Carrier : Set ‚Ñì
    _‚âà_ : Rel Carrier c
    0# : Carrier
    _‚âà?0 : ‚àÄ v ‚Üí Dec (v ‚âà 0#)
    suc : Carrier ‚Üí Carrier
    pred : Carrier ‚Üí Carrier

  default : Maybe Carrier ‚Üí Carrier
  default c = ùïÑ.fromMaybe 0# c

module Mk {‚Ñì‚ÇÄ} {‚Ñì‚ÇÅ}
  (value : Value ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ)
  {f : ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì} (F : ‚àÄ {‚Ñì} ‚Üí RawMonad {‚Ñì} f) where
  open Value value renaming (Carrier to V)
  open import bf.Parser as Parser using (Graph; Label; Edge)
  open RawMonad {‚Ñì‚ÇÄ} F

  record State : Set ‚Ñì‚ÇÄ where
    field
      tape : Tape V f
      pointer : ‚Ñ§
      program : Œ£[ g ‚àà Graph ] Label (Graph.size g)

  initial : Graph ‚Üí Tape V f ‚Üí State
  initial g t = record { tape = t ; pointer = + 0 ; program = g , Parser.initial _ }

  module _ (s : State) where
    private
      g = (proj‚ÇÅ $ State.program s)
      l = (proj‚ÇÇ $ State.program s)
      size = Graph.size g

    goto : Label size ‚Üí State
    goto l = record s { program = g , l }

    showState : String
    showState = printf "{ program = %s , %s }" (Parser.showGraph g) (Parser.showLabel l)

  record IOHandlers : Set ‚Ñì‚ÇÄ where
    field
      input : ‚ä§ ‚Üí f V
      output : V ‚Üí f (Lift ‚Ñì‚ÇÄ ‚ä§)

  op : Parser.Op ‚Üí V ‚Üí V
  op Parser.inc = suc
  op Parser.dec = pred

  ptrArith : Parser.PtrArith ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
  ptrArith Parser.inc = ‚Ñ§.suc
  ptrArith Parser.dec = ‚Ñ§.pred

  cond : Parser.Cond ‚Üí V ‚Üí Bool
  cond Parser.z v = ‚åä v ‚âà?0 ‚åã
  cond Parser.nz v = not ‚åä v ‚âà?0 ‚åã

  step : IOHandlers ‚Üí State ‚Üí f State
  step io s = go (Graph.edges g (proj‚ÇÇ $ State.program s))
    where g = proj‚ÇÅ (State.program s)
          size = Graph.size g
          go : List (Edge size) ‚Üí f State
          go [] = return s
          go (e ‚à∑ _) with Edge.effect e
          go (e ‚à∑ _) | Parser.noop = return (goto s $ Edge.target e)
          go (e ‚à∑ _) | Parser.input =
            IOHandlers.input io tt >>= Tape.set (State.tape s) (State.pointer s) >>
            return (goto s $ Edge.target e)
          go (e ‚à∑ _) | Parser.output =
            default <$> Tape.get (State.tape s) (State.pointer s) >>= IOHandlers.output io >>
            return (goto s $ Edge.target e)
          go (e ‚à∑ _) | Parser.op o =
            default <$> Tape.get (State.tape s) (State.pointer s) >>=
            Tape.set (State.tape s) (State.pointer s) ‚àò op o >>
            return (goto s (Edge.target e))
          go (e ‚à∑ _) | Parser.pointer p =
            return (goto record s { pointer = ptrArith p $ State.pointer s } $ Edge.target e)
          go (e ‚à∑ es) | Parser.cond c = do
            lift true ‚Üê lift ‚àò cond c ‚àò default <$> Tape.get (State.tape s) (State.pointer s)
              where lift false ‚Üí go es
            return (goto s $ Edge.target e)

  {-# NON_TERMINATING #-}
  run : IOHandlers ‚Üí State ‚Üí f State
  run io s = step io s >>= halt?
    where halt? : State ‚Üí f State
          halt? s‚Ä≤ with proj‚ÇÇ $ State.program s‚Ä≤
          halt? s‚Ä≤ | inj‚ÇÅ tt = return s‚Ä≤
          halt? s‚Ä≤ | inj‚ÇÇ y = run io s‚Ä≤
