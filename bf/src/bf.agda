module bf where

import Util as ùïå

open import Category.Monad using (RawMonad)
open import Data.Bool using (Bool; not; true; false)
open import Data.Char using (Char)
open import Data.Fin as ùîΩ using (Fin; 0F)
open import Data.Integer as ‚Ñ§ using (‚Ñ§; +_) renaming (_‚âü_ to _‚âü‚Ñ§_)
open import Data.List as ùïÉ using (List; []; _‚à∑_)
open import Data.Maybe as ùïÑ using (Maybe; nothing; just)
open import Data.Nat as ‚Ñï using (‚Ñï) renaming (_‚âü_ to _‚âü‚Ñï_)
import Data.Nat.Properties as ‚Ñï·µñ
open import Data.Product as ‚Ñô using (_√ó_; _,_; ‚àÉ-syntax; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Data.String as ùïä using (String)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; map‚ÇÇ)
import Data.Sum.Categorical.Left as ‚äé
open import Data.Unit using (‚ä§; tt)
open import Data.Vec as ùïç using (Vec; []; _‚à∑_)
import Data.Vec.Categorical as ùïç·∂ú
open import Function using (_|>_; _$_; flip; id; _‚àò_)
open import Level using (Level; _‚äî_; Lift; lift) renaming (suc to lsuc)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong)
open import Relation.Nullary using (Dec; yes; no)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Text.Printf using (printf)

private
  variable
    n m : ‚Ñï
    ‚Ñì ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ : Level

record Tape (V : Set ‚Ñì‚ÇÄ) (F : ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì) : Set ‚Ñì‚ÇÄ where
 field
    get : ‚Ñ§ ‚Üí F (Maybe V)
    set : ‚Ñ§ ‚Üí V ‚Üí F (Lift ‚Ñì‚ÇÄ ‚ä§)

record Value ‚Ñì c : Set (lsuc (c ‚äî ‚Ñì)) where
  field
    Carrier : Set ‚Ñì
    _‚âà_ : Rel Carrier c
    0# : Carrier
    _‚âà?0 : ‚àÄ v ‚Üí Dec (v ‚âà 0#)
    suc : Carrier ‚Üí Carrier
    pred : Carrier ‚Üí Carrier

  default : Maybe Carrier ‚Üí Carrier
  default c = ùïÑ.fromMaybe 0# c

integer : Value _ _
integer = record { Carrier = ‚Ñ§
                 ; _‚âà_ = _‚â°_
                 ; 0# = + 0
                 ; _‚âà?0 = Œª v ‚Üí v ‚âü‚Ñ§ + 0
                 ; suc = ‚Ñ§.suc
                 ; pred = ‚Ñ§.pred
                 }

record SourceLocation : Set where
  constructor _,_
  field
    filename : String
    offset : ‚Ñï

showSourceLocation : SourceLocation ‚Üí String
showSourceLocation (fn , i) = printf "%s:%i" fn (+ i)

module Lexer where
  data Token : Set where
    inc : SourceLocation ‚Üí Token
    dec : SourceLocation ‚Üí Token
    left : SourceLocation ‚Üí Token
    right : SourceLocation ‚Üí Token
    input : SourceLocation ‚Üí Token
    output : SourceLocation ‚Üí Token
    jz : SourceLocation ‚Üí Token
    jnz : SourceLocation ‚Üí Token
    comment : Char ‚Üí SourceLocation ‚Üí Token

  showToken : Token ‚Üí String
  showToken (inc l) = printf "inc (%s)" (showSourceLocation l)
  showToken (dec l) = printf "dec (%s)" (showSourceLocation l)
  showToken (left l) = printf "left (%s)" (showSourceLocation l)
  showToken (right l) = printf "right (%s)" (showSourceLocation l)
  showToken (input l) = printf "input (%s)" (showSourceLocation l)
  showToken (output l) = printf "output (%s)" (showSourceLocation l)
  showToken (jz l) = printf "jz (%s)" (showSourceLocation l)
  showToken (jnz l) = printf "jnz (%s)" (showSourceLocation l)
  showToken (comment c l) = printf "%c (%s)" c (showSourceLocation l)

  token : Char √ó SourceLocation ‚Üí Token
  token ('+' , l) = inc l
  token ('-' , l) = dec l
  token ('<' , l) = left l
  token ('>' , l) = right l
  token (',' , l) = input l
  token ('.' , l) = output l
  token ('[' , l) = jz l
  token (']' , l) = jnz l
  token (c , l) = comment c l

  tokenize : String ‚Üí Vec Char n -> Vec Token n
  tokenize fn cs = ùïç.map token $ ùïç.zip cs $ ùïç.map (Œª i ‚Üí fn , ùîΩ.to‚Ñï i) $ ùïç.tabulate id

module Parser (value : Value ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ) where
  open Value value renaming (Carrier to V)
  open Lexer

  data Effect : Set ‚Ñì‚ÇÄ where
    noop : Effect
    input : Effect
    output : Effect
    op : (V ‚Üí V) ‚Üí Effect
    pointer : (‚Ñ§ ‚Üí ‚Ñ§) ‚Üí Effect
    cond : (V ‚Üí Bool) ‚Üí Effect

  showEffect : Effect ‚Üí String
  showEffect noop = "noop"
  showEffect input = "input"
  showEffect output = "output"
  showEffect (op _) = "op"
  showEffect (pointer _) = "pointer"
  showEffect (cond _) = "cond"

  data Error : Set where
    unmatched : Token ‚Üí Error
    unimplemented : Error

  Label : ‚Ñï ‚Üí Set
  Label n = ‚ä§ ‚äé Fin n

  showLabel : Label n ‚Üí String
  showLabel (inj‚ÇÅ tt) = "‚àô"
  showLabel (inj‚ÇÇ i) = ùïå.showùîΩ i

  record Edge n : Set ‚Ñì‚ÇÄ where
    field
      base target : Label n
      effect : Effect
      source : Maybe Token

  showEdge : Edge n ‚Üí String
  showEdge record { base = b ; target = t ; effect = e ; source = just k} =
    printf "%s‚Üí%s %s %s" (showLabel b) (showLabel t) (showEffect e) (showToken k)
  showEdge record { base = b ; target = t ; effect = e ; source = nothing } =
    printf "%s‚Üí%s %s" (showLabel b) (showLabel t) (showEffect e)

  record Graph : Set ‚Ñì‚ÇÄ where
    field
      size : ‚Ñï
      edges : Label size ‚Üí List (Edge size)

  module _ n where
    private
      L = Label n
      E = Edge n
      Raw = Vec Token n

    terminal : L
    terminal = inj‚ÇÅ tt

    initial : L
    initial = inj‚ÇÅ tt

    private
      mk : Token ‚Üí Fin n ‚Üí Effect ‚Üí E
      mk t b e with n ‚âü‚Ñï ‚Ñï.suc (ùîΩ.to‚Ñï b)
      ... | yes _ = record { base = inj‚ÇÇ b ; target = terminal ; effect = e; source = just t }
      ... | no P = record { base = inj‚ÇÇ b ; target = inj‚ÇÇ $ ùîΩ.lower‚ÇÅ (ùîΩ.suc b) P; effect = e; source = just t }

      brackets : Token ‚Üí Maybe ùïå.Bracket
      brackets (jz _) = just ùïå.op
      brackets (jnz _) = just ùïå.cl
      brackets _ = nothing

    interpretToken : Raw ‚Üí Token ‚Üí Fin n ‚Üí Error ‚äé List E
    interpretToken _ t@(inc _) b = inj‚ÇÇ $ mk t b (op suc) ‚à∑ []
    interpretToken _ t@(dec _) b = inj‚ÇÇ $ mk t b (op pred) ‚à∑ []
    interpretToken _ t@(left _) b = inj‚ÇÇ $ mk t b (pointer ‚Ñ§.pred) ‚à∑ []
    interpretToken _ t@(right _) b = inj‚ÇÇ $ mk t b (pointer ‚Ñ§.suc) ‚à∑ []
    interpretToken _ t@(input _) b = inj‚ÇÇ $ mk t b input ‚à∑ []
    interpretToken _ t@(output _) b = inj‚ÇÇ $ mk t b output ‚à∑ []
    interpretToken _ t@(comment _ _) b = inj‚ÇÇ $ mk t b noop ‚à∑ []
    interpretToken raw t@(jz _) b with mk t b
    ... | mk‚Ä≤ rewrite proj‚ÇÇ (ùïå.excSplit‚Ñï b) =
      ùïå.match brackets (ùïç.drop (ùîΩ.to‚Ñï b) raw) |> ùïÑ.maybe‚Ä≤ f (inj‚ÇÅ (unmatched t))
        where f = Œª j ‚Üí inj‚ÇÇ $ record (mk‚Ä≤ $ cond $ (Œª v ‚Üí ‚åä v ‚âà?0 ‚åã)) { target = inj‚ÇÇ (ùîΩ.raise _ j) } ‚à∑ mk‚Ä≤ noop ‚à∑ []
    interpretToken raw t@(jnz _) b with mk t b
    ... | mk‚Ä≤ rewrite proj‚ÇÇ (ùïå.incSplit‚Ñï b) =
      ùïå.match (ùïå.flip brackets) (ùïç.reverse $ ùïç.take _ raw) |> ùïÑ.maybe‚Ä≤ f (inj‚ÇÅ $ unmatched t)
        where go : ‚àÄ k ‚Üí Fin (‚Ñï.suc (ùîΩ.to‚Ñï b)) ‚Üí Fin (‚Ñï.suc (ùîΩ.to‚Ñï b ‚Ñï.+ k))
              go k j with ùîΩ.inject+ (ùîΩ.to‚Ñï j) (ùîΩ.to‚Ñï b ùîΩ.‚Ñï- j)
              ... | l rewrite ‚Ñï·µñ.m‚à∏n+n‚â°m (ùïå.to‚Ñï-‚â§ j) = ùîΩ.inject+ k l
              f = Œª j ‚Üí inj‚ÇÇ $ record (mk‚Ä≤ $ cond $ Œª v ‚Üí not ‚åä v ‚âà?0 ‚åã) { target = inj‚ÇÇ $ go _ j } ‚à∑ mk‚Ä≤ noop ‚à∑ []

  module _ (g : Graph) where
    private
      s = Graph.size g

    labels : Vec (Label s) (‚Ñï.suc s)
    labels = initial s ‚à∑ ùïç.tabulate inj‚ÇÇ

  graph : Vec Token n ‚Üí Error ‚äé Graph
  graph {ùîΩ.0F} ts = inj‚ÇÇ $ record { size = 0 ; edges = Œª _ ‚Üí record { base = initial _ ; target = terminal _ ; effect = noop ; source = nothing } ‚à∑ [] }
  graph {n@(‚Ñï.suc _)} ts = map‚ÇÇ (Œª es ‚Üí record { size = n ; edges = edges es }) $
    M.sequenceA $ ùïç.zip ts (ùïç.tabulate id) |> ùïç.map Œª { (t , b) ‚Üí interpretToken n ts t b }
      where module M = ùïç·∂ú.TraversableA {‚Ñì‚ÇÄ} {n} (‚äé.applicative Error ‚Ñì‚ÇÄ)
            edges : Vec (List (Edge n)) n ‚Üí Label n ‚Üí List (Edge n)
            edges _ (inj‚ÇÅ _) = record { base = initial _ ; target = inj‚ÇÇ 0F ; effect = noop ; source = nothing } ‚à∑ []
            edges es (inj‚ÇÇ i) = ùïç.lookup es i

  showGraph : Graph ‚Üí String
  showGraph g = goG "{" $ (labels g)
    where goL : Label (Graph.size g) ‚Üí String
          goL = ùïå.showùïÉ showEdge ‚àò Graph.edges g
          goG : String ‚Üí Vec (Label (Graph.size g)) m ‚Üí String
          goG acc [] = printf "%s}" acc
          goG acc (l ‚à∑ []) = printf "%s%s: %s}" acc (showLabel l) (goL l)
          goG acc (l ‚à∑ ls@(_ ‚à∑ _)) =
            goG (printf "%s%s: %s, " acc (showLabel l) (goL l)) ls

module Interpreter (value : Value ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ) {f : ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì} (F : ‚àÄ {‚Ñì} ‚Üí RawMonad {‚Ñì} f) where
  open Value value renaming (Carrier to V)
  open Parser value using (Graph; Label; Edge)

  record State : Set ‚Ñì‚ÇÄ where
    field
      tape : Tape V f
      pointer : ‚Ñ§
      program : Œ£[ g ‚àà Graph ] Label (Graph.size g)

  module _ (s : State) where
    private
      g = (proj‚ÇÅ $ State.program s)
      size = Graph.size g

    goto : Label size ‚Üí State
    goto l = record s { program = g , l }

  record IOHandlers : Set ‚Ñì‚ÇÄ where
    field
      input : ‚ä§ ‚Üí f V
      output : V ‚Üí f (Lift ‚Ñì‚ÇÄ ‚ä§)

  step : IOHandlers ‚Üí State ‚Üí f State
  step io s = go (Graph.edges g (proj‚ÇÇ $ State.program s))
    where g = proj‚ÇÅ (State.program s)
          size = Graph.size g
          open RawMonad {‚Ñì‚ÇÄ} F
          go : List (Edge size) ‚Üí f State
          go [] = return s
          go (e ‚à∑ _) with Edge.effect e
          go (e ‚à∑ _) | Parser.noop = return (goto s $ Edge.target e)
          go (e ‚à∑ _) | Parser.input =
            IOHandlers.input io tt >>= Tape.set (State.tape s) (State.pointer s) >>
            return (goto s $ Edge.target e)
          go (e ‚à∑ _) | Parser.output =
            default <$> Tape.get (State.tape s) (State.pointer s) >>= IOHandlers.output io >>
            return (goto s $ Edge.target e)
          go (e ‚à∑ _) | Parser.op o =
            default <$> Tape.get (State.tape s) (State.pointer s) >>=
            Tape.set (State.tape s) (State.pointer s) ‚àò o >>
            return (goto s (Edge.target e))
          go (e ‚à∑ _) | Parser.pointer p =
            return (goto record s { pointer = p $ State.pointer s } $ Edge.target e)
          go (e ‚à∑ es) | Parser.cond c =
            default <$> Tape.get (State.tape s) (State.pointer s) >>= cond ‚àò c
              where cond : Bool ‚Üí f State
                    cond false = go es
                    cond true = return (goto s $ Edge.target e)

module main where
  open import IO using (lift; run; sequence‚Ä≤; putStrLn)
  open import IO.Primitive hiding (putStrLn)
  import Codata.Musical.Colist as ùïÉ·∂ú

  import Unix

  data Action : Set where
    debugLexer : Action
    debugParser : Action
    usageAction : Action

  record Settings : Set where
    field
      action : Action
      programFilename : String

  usage : {a : Set} ‚Üí Maybe String ‚Üí IO a
  usage _ = Unix.exit (Unix.failure $ + 2)

  parseArgs : List String ‚Üí IO Settings
  parseArgs cs = go cs usageAction nothing
    where go : List String ‚Üí Action ‚Üí Maybe String ‚Üí IO Settings
          go [] a _ = usage nothing
          go (s ‚à∑ cs) a _ with s ùïä.‚âü "--lexer"
          go (s ‚à∑ cs) _ obf | yes _ = go cs debugLexer obf
          go (s ‚à∑ cs) a _ | no _ with s ùïä.‚âü "--parser"
          go (s ‚à∑ cs) a obf | no _ | yes _ = go cs debugParser obf
          go (s ‚à∑ []) a _ | no _ | no _ = return record { action = a ; programFilename = s }
          go (s ‚à∑ x ‚à∑ cs) a obf | no ¬¨p | no ¬¨p‚ÇÅ = usage nothing

  handleParserError : {v : Value ‚Ñì ‚Ñì‚ÇÄ} {a : Set} ‚Üí Parser.Error v ‚äé a ‚Üí IO a
  handleParserError (inj‚ÇÅ (Parser.unmatched t)) = Unix.die $ printf "unmatched %s" (Lexer.showToken t)
  handleParserError (inj‚ÇÅ Parser.unimplemented) = Unix.die $ printf "unimplemented"
  handleParserError (inj‚ÇÇ a) = return a

  runAction : Settings ‚Üí IO _
  runAction s with Settings.action s
  runAction s | debugLexer = do
    let fn = (Settings.programFilename s)
    raw ‚Üê readFiniteFile fn
    let ts = Lexer.tokenize fn (ùïä.toVec raw)
    run ‚àò sequence‚Ä≤ $ ùïÉ·∂ú.map (putStrLn ‚àò Lexer.showToken) (ùïÉ·∂ú.fromList $ ùïç.toList ts)
  runAction s | debugParser = do
    let fn = (Settings.programFilename s)
    raw ‚Üê readFiniteFile fn
    g ‚Üê handleParserError $ Parser.graph integer $ Lexer.tokenize fn (ùïä.toVec raw)
    run (putStrLn $ Parser.showGraph _ g) >>= return ‚àò lift
  runAction s | usageAction = usage nothing

  main = Unix.getArgs >>= parseArgs >>= runAction
